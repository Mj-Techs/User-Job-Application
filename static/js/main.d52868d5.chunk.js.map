{"version":3,"sources":["JobForm.js","UserInfo.js","UserDetail.js","JobTitleInfo.js","AdminPage.js","JobApplication.js","App.js","index.js"],"names":["JobForm","props","formSubmission","isSaved","toggleIsSaved","useState","name","setName","email","setEmail","phoneNumber","setPhoneNumber","selectedOption","setSelectedOption","experience","setExperience","technicalSkill","setTechnicalSkill","formErrors","setFormErrors","errors","useEffect","style","backgroundColor","fontFamily","height","width","Form","onSubmit","e","preventDefault","trim","length","validator","isEmail","isAlpha","selctedOption","Object","keys","phone","jobTitle","skills","Group","as","Row","Label","column","sm","Col","type","value","onChange","target","className","id","placeholder","map","ele","i","Control","rows","Button","UserInfo","setIsSaved","info","axios","post","then","response","result","data","console","log","catch","err","alert","message","customStyles","overlay","content","top","left","right","bottom","marginRight","transform","minHeight","minWidth","buttonStyle","position","color","crossStyle","border","outline","UserDetail","modalIsOpen","ToggleModal","userDetail","setUserDetail","get","isOpen","onRequestClose","onClick","JobTitleInfo","developer","Jobheader","setId","setModalIsOpen","Table","responsive","user","createdAt","slice","indexOf","split","join","variant","size","handleDetails","_id","status","put","handleShortlist","handleReject","AdminPage","Title","setDeveloper","setJobHeader","filter","job","index","handleClick","JobApplication","setData","paddingLeft","Modal","setAppElement","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d52868d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport validator from \"validator\";\nimport { Form, Row, Col, Button } from \"react-bootstrap\";\n// import { v4 as uuidv4 } from \"uuid\";\nconst JobForm = (props) => {\n  const { formSubmission, isSaved, toggleIsSaved } = props;\n  const domain = [\n    \"Front-End Developer\",\n    \"Node.js Developer\",\n    \"MEAN Stack Developer\",\n    \"FULL Stack Developer\",\n  ];\n  //   const [id, setId] = useState(uuidv4());\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n  const [technicalSkill, setTechnicalSkill] = useState(\"\");\n  const [formErrors, setFormErrors] = useState({}); //state variable will keep track of the formErrors.\n  const errors = {}; //local variable to track the errors.\n  useEffect(() => {\n    if (isSaved) {\n      setName(\"\");\n      setEmail(\"\");\n      setPhoneNumber(\"\");\n      setSelectedOption(\"\");\n      setExperience(\"\");\n      setTechnicalSkill(\"\");\n      toggleIsSaved();\n    }\n  }, [toggleIsSaved, isSaved]);\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n  const handlePhoneChange = (e) => {\n    setPhoneNumber(e.target.value);\n  };\n  const handleJobChange = (e) => {\n    setSelectedOption(e.target.value);\n  };\n  const handleExperienceChange = (e) => {\n    setExperience(e.target.value);\n  };\n  const handleSkillChange = (e) => {\n    setTechnicalSkill(e.target.value);\n  };\n  const runValidation = () => {\n    //check name validation\n    if (name.trim().length === 0) {\n      errors.name = \"name cannot be blank \";\n    }\n    //email validation\n    if (email.trim().length === 0) {\n      errors.email = \"email cannot be blank\";\n    } else if (!validator.isEmail(email)) {\n      errors.email = \"Invalid email formate\";\n    }\n    //phone validation\n    if (phoneNumber.trim().length === 0) {\n      errors.phoneNumber = \"phone Number cannot be blank\";\n    } else if (validator.isAlpha(phoneNumber, \"en-US\")) {\n      errors.phoneNumber = \"Contact Number cannot contain character \";\n    } else if (phoneNumber.length < 10 || phoneNumber.length > 13) {\n      errors.phoneNumber = \"Invalid Number\";\n    }\n\n    //Experience Validation\n    if (experience.trim().length === 0) {\n      errors.experience = \"Experience field cannot be blank\";\n    }\n    //Technical Skill validation\n    if (technicalSkill.trim().length === 0) {\n      errors.technicalSkill = \"Technical Skill field cannot be blank\";\n    }\n    // Job validation\n    if (selectedOption.trim().length === 0) {\n      errors.selctedOption = \"Job field cannot be blank\";\n    }\n  };\n  const handleSubmitChange = (e) => {\n    e.preventDefault();\n    runValidation();\n    if (Object.keys(errors).length === 0) {\n      setFormErrors({});\n      const formData = {\n        name: name,\n        email: email,\n        phone: phoneNumber,\n        jobTitle: selectedOption,\n        experience: experience,\n        skills: technicalSkill,\n      };\n      formSubmission(formData);\n    } else {\n      setFormErrors(errors);\n    }\n  };\n  return (\n    <div\n      style={{\n        backgroundColor: \"white\",\n        fontFamily: \"sans-serif\",\n        height: \"500px\",\n        width: \"900px\",\n      }}\n    >\n      <Form onSubmit={handleSubmitChange}>\n        <Form.Group as={Row}>\n          <Form.Label column sm=\"2\">\n            Fullname\n          </Form.Label>\n          <Col sm=\"10\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={handleNameChange}\n              className=\"form-control\"\n              id=\"inputdefault\"\n            />\n            {formErrors.name && <span>{formErrors.name}</span>} <hr />\n          </Col>\n          <br />\n          <Form.Label column sm=\"2\">\n            Email address\n          </Form.Label>\n          <Col sm=\"10\">\n            <input\n              type=\"text\"\n              placeholder=\"example@gmail.com\"\n              value={email}\n              onChange={handleEmailChange}\n              className=\"form-control\"\n              id=\"inputdefault\"\n            />\n            {formErrors.email && <span>{formErrors.email}</span>}\n            <hr />\n          </Col>\n\n          <br />\n          <Form.Label column sm=\"2\">\n            Contact Number\n          </Form.Label>\n          <Col sm=\"10\">\n            <input\n              type=\"text\"\n              placeholder=\"+91 9988554344\"\n              value={phoneNumber}\n              onChange={handlePhoneChange}\n              className=\"form-control\"\n              id=\"inputdefault\"\n            />\n            {formErrors.phoneNumber && <span>{formErrors.phoneNumber}</span>}\n            <hr />\n          </Col>\n\n          <br />\n          <Form.Label column sm=\"2\">\n            Applying for job\n          </Form.Label>\n          <Col sm=\"10\">\n            <select\n              value={selectedOption}\n              onChange={handleJobChange}\n              className=\"form-control\"\n              id=\"inputdefault\"\n            >\n              <option value=\"\">----Select----</option>\n              {domain.map((ele, i) => {\n                return (\n                  <option key={i} value={ele}>\n                    {ele}\n                  </option>\n                );\n              })}\n            </select>\n            {formErrors.selctedOption && (\n              <span>{formErrors.selctedOption}</span>\n            )}\n            <hr />\n          </Col>\n          <br />\n          <Form.Label column sm=\"2\">\n            Experience\n          </Form.Label>\n          <Col sm=\"10\">\n            <input\n              type=\"text\"\n              placeholder=\"Experience(2 years 3 months)\"\n              value={experience}\n              onChange={handleExperienceChange}\n              className=\"form-control\"\n              id=\"inputdefault\"\n            />\n            {formErrors.experience && <span>{formErrors.experience}</span>}\n            <hr />\n          </Col>\n          <br />\n          <Form.Label column sm=\"2\">\n            Technical Skills\n          </Form.Label>\n          <Col sm=\"10\">\n            <Form.Control\n              as=\"textarea\"\n              rows={2}\n              placeholder=\"Technical Skills\"\n              value={technicalSkill}\n              onChange={handleSkillChange}\n            />\n            {formErrors.technicalSkill && (\n              <span>{formErrors.technicalSkill}</span>\n            )}\n            <hr />\n          </Col>\n          <br />\n          <Col sm=\"10\">\n            <Button type=\"submit\">Send Application</Button>\n          </Col>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n};\nexport default JobForm;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport JobForm from \"./JobForm\";\nconst UserInfo = (props) => {\n  const [isSaved, setIsSaved] = useState(false);\n  const formSubmission = (info) => {\n    // console.log(info);\n    axios\n      .post(\n        \"http://dct-application-form.herokuapp.com/users/application-form\",\n        info\n      )\n      .then((response) => {\n        const result = response.data;\n        console.log(result);\n        setIsSaved(true);\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n  const toggleIsSaved = () => {\n    setIsSaved(false);\n  };\n  return (\n    <div>\n      <h2>Apply for Job</h2>\n      <JobForm\n        formSubmission={formSubmission}\n        isSaved={isSaved}\n        toggleIsSaved={toggleIsSaved}\n      />\n    </div>\n  );\n};\nexport default UserInfo;\n","import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport axios from \"axios\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,0.7)\",\n  },\n  content: {\n    top: \"40%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    minHeight: \"40%\",\n    minWidth: \"40%\",\n  },\n};\nconst buttonStyle = {\n  position: \"absolute\",\n  right: \"0\",\n  bottom: \"0\",\n  color: \"grey\",\n  backgroundColor: \"light\",\n};\nconst crossStyle = {\n  position: \"absolute\",\n  right: \"0\",\n  top: \"0\",\n  color: \"grey\",\n  border: \"none\",\n  outline: \"none\",\n};\nconst UserDetail = (props) => {\n  const { id, modalIsOpen, ToggleModal } = props;\n  const [userDetail, setUserDetail] = useState({});\n\n  useEffect(() => {\n    if (id) {\n      axios\n        .get(\n          `http://dct-application-form.herokuapp.com/users/application-form/${id}`\n        )\n        .then((response) => {\n          const result = response.data;\n          setUserDetail(result);\n        })\n        .catch((err) => {\n          alert(err.message);\n        });\n    }\n  }, [id]);\n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={ToggleModal}\n        style={customStyles}\n      >\n        <h2>{userDetail.name} Profile</h2>\n        <hr />\n        <div>\n          <h5>Contact number - {userDetail.phone}</h5>\n          <h5>Email - {userDetail.email}</h5>\n          <h5>Skills - {userDetail.skills}</h5>\n          <h5>Experience - {userDetail.experience}</h5>\n          <hr />\n        </div>\n        <button onClick={ToggleModal} style={crossStyle}>\n          X\n        </button>\n        <button onClick={ToggleModal} style={buttonStyle}>\n          Close\n        </button>\n      </Modal>\n    </div>\n  );\n};\nexport default UserDetail;\n","import React, { useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport UserDetail from \"./UserDetail\";\n\nconst JobTitleInfo = (props) => {\n  const { developer, Jobheader } = props;\n  // console.log(props);\n  const [id, setId] = useState(\"\");\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const handleDetails = (id) => {\n    setId(id);\n    setModalIsOpen(true);\n  };\n  const ToggleModal = () => {\n    setModalIsOpen(!modalIsOpen);\n  };\n  const handleShortlist = (id) => {\n    axios\n      .put(\n        `http://dct-application-form.herokuapp.com/users/application-form/update/${id}`,\n        {\n          status: \"shortlisted\",\n        }\n      )\n      //   .then((response) => {\n      //     const result = response.data;\n      //     console.log(result);\n      //   })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n  const handleReject = (id) => {\n    axios\n      .put(\n        `http://dct-application-form.herokuapp.com/users/application-form/update/${id}`,\n        {\n          status: \"rejected\",\n        }\n      )\n      //   .then((response) => {\n      //     const result = response.data;\n      //     // console.log(result);\n      //   })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n  return (\n    <div style={{ fontFamily: \"sans-serif\" }}>\n      <br />\n      <h1>{Jobheader}s</h1>\n      <p>List of candidates applied for {Jobheader} job</p>\n      <Table className=\"table  table-striped\" responsive=\"xl\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Technical Skills</th>\n            <th>Experience</th>\n            <th>Applied Date</th>\n            <th>View Details</th>\n            <th>Update Application Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {developer.map((user) => {\n            return (\n              <tr key={user._id}>\n                <td>{user.name}</td>\n                <td>{user.skills}</td>\n                <td>{user.experience}</td>\n                <td>\n                  {user.createdAt\n                    .slice(0, user.createdAt.indexOf(\"T\"))\n                    .split(\"-\")\n                    .join(\"/\")}\n                </td>\n                <td>\n                  <Button\n                    variant=\"info\"\n                    size=\"sm\"\n                    onClick={() => {\n                      handleDetails(user._id);\n                    }}\n                  >\n                    View Details\n                  </Button>\n                </td>\n                <td>\n                  {user.status === \"applied\" ? (\n                    <div>\n                      <Button\n                        variant=\"success\"\n                        onClick={() => {\n                          handleShortlist(user._id);\n                        }}\n                      >\n                        Shortlist\n                      </Button>\n                      <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                          handleReject(user._id);\n                        }}\n                      >\n                        Reject\n                      </Button>\n                    </div>\n                  ) : user.status === \"shortlisted\" ? (\n                    <Button variant=\"success\">Shortlisted</Button>\n                  ) : (\n                    user.status === \"rejected\" && (\n                      <Button variant=\"danger\">Rejected</Button>\n                    )\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      {id && (\n        <UserDetail\n          id={id}\n          modalIsOpen={modalIsOpen}\n          ToggleModal={ToggleModal}\n        />\n      )}\n    </div>\n  );\n};\nexport default JobTitleInfo;\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport JobTitleInfo from \"./JobTitleInfo\";\nconst AdminPage = (props) => {\n  const Title = [\n    \"Front-End Developer\",\n    \"Node.js Developer\",\n    \"MEAN Stack Developer\",\n    \"FULL Stack Developer\",\n  ];\n  const { data } = props;\n  const [developer, setDeveloper] = useState([]);\n  const [Jobheader, setJobHeader] = useState(Title[0]);\n\n  // To show the Front-End Developers at inital rendering\n  useEffect(() => {\n    const result = data.filter((i) => {\n      return i.jobTitle === \"Front-End Developer\";\n    });\n    setDeveloper(result);\n  }, [data]);\n\n  // After clicking on JobTitle button\n  const handleClick = (index) => {\n    setJobHeader(Title[index]);\n    const result = data.filter((i) => {\n      return i.jobTitle === Title[index];\n    });\n    setDeveloper(result);\n  };\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n      {Title.map((job, i) => {\n        return (\n          <Button\n            key={i}\n            onClick={() => handleClick(i)}\n            variant=\"outline-primary\"\n          >\n            {job}\n          </Button>\n        );\n      })}\n\n      {developer && (\n        <JobTitleInfo developer={developer} Jobheader={Jobheader} />\n      )}\n    </div>\n  );\n};\nexport default AdminPage;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport UserInfo from \"./UserInfo\";\nimport AdminPage from \"./AdminPage\";\n// import { Container, Row } from \"react-bootstrap\";\nconst JobApplication = (props) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://dct-application-form.herokuapp.com/users/application-forms\")\n      .then((response) => {\n        const result = response.data;\n        // console.log(result);\n        setData(result);\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  }, []);\n  return (\n    <div style={{ paddingLeft: \"12rem\" }}>\n      <UserInfo /> <br />\n      <AdminPage data={data} />\n    </div>\n  );\n};\nexport default JobApplication;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport JobApplication from \"./JobApplication\";\nModal.setAppElement(\"#root\");\nconst App = () => {\n  return (\n    <div>\n      <JobApplication />\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}